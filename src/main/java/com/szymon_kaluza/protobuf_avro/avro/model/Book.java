/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.szymon_kaluza.protobuf_avro.avro.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Book extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2661586758014895213L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Book\",\"namespace\":\"com.szymon_kaluza.protobuf_avro.avro.model\",\"fields\":[{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"author\",\"type\":{\"type\":\"record\",\"name\":\"Author\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"surname\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nationality\",\"type\":[\"null\",\"string\"],\"default\":null}]}},{\"name\":\"pages\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"available\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Book> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Book> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Book> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Book> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Book> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Book to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Book from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Book instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Book fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence title;
  private com.szymon_kaluza.protobuf_avro.avro.model.Author author;
  private Long pages;
  private Boolean available;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Book() {}

  /**
   * All-args constructor.
   * @param title The new value for title
   * @param author The new value for author
   * @param pages The new value for pages
   * @param available The new value for available
   */
  public Book(CharSequence title, com.szymon_kaluza.protobuf_avro.avro.model.Author author, Long pages, Boolean available) {
    this.title = title;
    this.author = author;
    this.pages = pages;
    this.available = available;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return author;
    case 2: return pages;
    case 3: return available;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: title = (CharSequence)value$; break;
    case 1: author = (com.szymon_kaluza.protobuf_avro.avro.model.Author)value$; break;
    case 2: pages = (Long)value$; break;
    case 3: available = (Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'author' field.
   * @return The value of the 'author' field.
   */
  public com.szymon_kaluza.protobuf_avro.avro.model.Author getAuthor() {
    return author;
  }


  /**
   * Sets the value of the 'author' field.
   * @param value the value to set.
   */
  public void setAuthor(com.szymon_kaluza.protobuf_avro.avro.model.Author value) {
    this.author = value;
  }

  /**
   * Gets the value of the 'pages' field.
   * @return The value of the 'pages' field.
   */
  public Long getPages() {
    return pages;
  }


  /**
   * Sets the value of the 'pages' field.
   * @param value the value to set.
   */
  public void setPages(Long value) {
    this.pages = value;
  }

  /**
   * Gets the value of the 'available' field.
   * @return The value of the 'available' field.
   */
  public Boolean getAvailable() {
    return available;
  }


  /**
   * Sets the value of the 'available' field.
   * @param value the value to set.
   */
  public void setAvailable(Boolean value) {
    this.available = value;
  }

  /**
   * Creates a new Book RecordBuilder.
   * @return A new Book RecordBuilder
   */
  public static com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder newBuilder() {
    return new com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder();
  }

  /**
   * Creates a new Book RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Book RecordBuilder
   */
  public static com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder newBuilder(com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder other) {
    if (other == null) {
      return new com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder();
    } else {
      return new com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder(other);
    }
  }

  /**
   * Creates a new Book RecordBuilder by copying an existing Book instance.
   * @param other The existing instance to copy.
   * @return A new Book RecordBuilder
   */
  public static com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder newBuilder(com.szymon_kaluza.protobuf_avro.avro.model.Book other) {
    if (other == null) {
      return new com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder();
    } else {
      return new com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder(other);
    }
  }

  /**
   * RecordBuilder for Book instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Book>
    implements org.apache.avro.data.RecordBuilder<Book> {

    private CharSequence title;
    private com.szymon_kaluza.protobuf_avro.avro.model.Author author;
    private com.szymon_kaluza.protobuf_avro.avro.model.Author.Builder authorBuilder;
    private Long pages;
    private Boolean available;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.author)) {
        this.author = data().deepCopy(fields()[1].schema(), other.author);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasAuthorBuilder()) {
        this.authorBuilder = com.szymon_kaluza.protobuf_avro.avro.model.Author.newBuilder(other.getAuthorBuilder());
      }
      if (isValidValue(fields()[2], other.pages)) {
        this.pages = data().deepCopy(fields()[2].schema(), other.pages);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.available)) {
        this.available = data().deepCopy(fields()[3].schema(), other.available);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Book instance
     * @param other The existing instance to copy.
     */
    private Builder(com.szymon_kaluza.protobuf_avro.avro.model.Book other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.author)) {
        this.author = data().deepCopy(fields()[1].schema(), other.author);
        fieldSetFlags()[1] = true;
      }
      this.authorBuilder = null;
      if (isValidValue(fields()[2], other.pages)) {
        this.pages = data().deepCopy(fields()[2].schema(), other.pages);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.available)) {
        this.available = data().deepCopy(fields()[3].schema(), other.available);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder setTitle(CharSequence value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'author' field.
      * @return The value.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Author getAuthor() {
      return author;
    }


    /**
      * Sets the value of the 'author' field.
      * @param value The value of 'author'.
      * @return This builder.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder setAuthor(com.szymon_kaluza.protobuf_avro.avro.model.Author value) {
      validate(fields()[1], value);
      this.authorBuilder = null;
      this.author = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'author' field has been set.
      * @return True if the 'author' field has been set, false otherwise.
      */
    public boolean hasAuthor() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'author' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.szymon_kaluza.protobuf_avro.avro.model.Author.Builder getAuthorBuilder() {
      if (authorBuilder == null) {
        if (hasAuthor()) {
          setAuthorBuilder(com.szymon_kaluza.protobuf_avro.avro.model.Author.newBuilder(author));
        } else {
          setAuthorBuilder(com.szymon_kaluza.protobuf_avro.avro.model.Author.newBuilder());
        }
      }
      return authorBuilder;
    }

    /**
     * Sets the Builder instance for the 'author' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder setAuthorBuilder(com.szymon_kaluza.protobuf_avro.avro.model.Author.Builder value) {
      clearAuthor();
      authorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'author' field has an active Builder instance
     * @return True if the 'author' field has an active Builder instance
     */
    public boolean hasAuthorBuilder() {
      return authorBuilder != null;
    }

    /**
      * Clears the value of the 'author' field.
      * @return This builder.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder clearAuthor() {
      author = null;
      authorBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pages' field.
      * @return The value.
      */
    public Long getPages() {
      return pages;
    }


    /**
      * Sets the value of the 'pages' field.
      * @param value The value of 'pages'.
      * @return This builder.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder setPages(Long value) {
      validate(fields()[2], value);
      this.pages = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pages' field has been set.
      * @return True if the 'pages' field has been set, false otherwise.
      */
    public boolean hasPages() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pages' field.
      * @return This builder.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder clearPages() {
      pages = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'available' field.
      * @return The value.
      */
    public Boolean getAvailable() {
      return available;
    }


    /**
      * Sets the value of the 'available' field.
      * @param value The value of 'available'.
      * @return This builder.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder setAvailable(Boolean value) {
      validate(fields()[3], value);
      this.available = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'available' field has been set.
      * @return True if the 'available' field has been set, false otherwise.
      */
    public boolean hasAvailable() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'available' field.
      * @return This builder.
      */
    public com.szymon_kaluza.protobuf_avro.avro.model.Book.Builder clearAvailable() {
      available = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Book build() {
      try {
        Book record = new Book();
        record.title = fieldSetFlags()[0] ? this.title : (CharSequence) defaultValue(fields()[0]);
        if (authorBuilder != null) {
          try {
            record.author = this.authorBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("author"));
            throw e;
          }
        } else {
          record.author = fieldSetFlags()[1] ? this.author : (com.szymon_kaluza.protobuf_avro.avro.model.Author) defaultValue(fields()[1]);
        }
        record.pages = fieldSetFlags()[2] ? this.pages : (Long) defaultValue(fields()[2]);
        record.available = fieldSetFlags()[3] ? this.available : (Boolean) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Book>
    WRITER$ = (org.apache.avro.io.DatumWriter<Book>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Book>
    READER$ = (org.apache.avro.io.DatumReader<Book>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.title == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.title);
    }

    this.author.customEncode(out);

    if (this.pages == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.pages);
    }

    if (this.available == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.available);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.title = null;
      } else {
        this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
      }

      if (this.author == null) {
        this.author = new com.szymon_kaluza.protobuf_avro.avro.model.Author();
      }
      this.author.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.pages = null;
      } else {
        this.pages = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.available = null;
      } else {
        this.available = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.title = null;
          } else {
            this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          }
          break;

        case 1:
          if (this.author == null) {
            this.author = new com.szymon_kaluza.protobuf_avro.avro.model.Author();
          }
          this.author.customDecode(in);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pages = null;
          } else {
            this.pages = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.available = null;
          } else {
            this.available = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










